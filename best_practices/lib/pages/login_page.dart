import 'dart:async';
import 'dart:math';

import 'package:faker/faker.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

import '../utils/permission.dart';
import '../utils/zegocloud_token.dart';
import '../zego_call_manager.dart';
import '../zego_sdk_key_center.dart';
import 'call/call_controller.dart';
import 'home_page.dart';

class LoginPage extends StatefulWidget {
  const LoginPage({super.key, required this.title});

  final String title;

  @override
  State<LoginPage> createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
  List<StreamSubscription> subscriptions = [];
  final userIDController = TextEditingController(text: Random().nextInt(100000).toString());
  final userNameController = TextEditingController(text: faker.person.name());

  @override
  void initState() {
    super.initState();
    subscriptions.addAll([
      ZEGOSDKManager()
          .zimService
          .connectionStateStreamCtrl
          .stream
          .listen((ZIMServiceConnectionStateChangedEvent event) {
        debugPrint('connectionStateStreamCtrl: $event');
        if (event.state == ZIMConnectionState.connected) {
          Navigator.pushReplacement(
            context,
            MaterialPageRoute(builder: (context) => const HomePage()),
          );
        }
      })
    ]);
    requestPermission();
  }

  @override
  void dispose() {
    for (final element in subscriptions) {
      element.cancel();
    }
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text(widget.title)),
      body: Padding(
        padding: const EdgeInsets.only(top: 100, left: 20, right: 20),
        child: Column(
          children: [
            logo(),
            const SizedBox(height: 50),
            userIDInputView(),
            const SizedBox(height: 20),
            userNameInputView(),
            const SizedBox(height: 40),
            loginButton(),
          ],
        ),
      ),
    );
  }

  SizedBox loginButton() {
    return SizedBox(
      width: 200,
      height: 40,
      child: ElevatedButton(
        onPressed: () async {
          // init SDK
          await ZEGOSDKManager().init(SDKKeyCenter.appID, kIsWeb ? null : SDKKeyCenter.appSign);
          ZegoCallManager().addListener();
          ZegoCallController().initService();
          String? token;
          if (kIsWeb) {
            // ! ** Warning: ZegoTokenUtils is only for use during testing. When your application goes live,
            // ! ** tokens must be generated by the server side. Please do not generate tokens on the client side!
            token = ZegoTokenUtils.generateToken(SDKKeyCenter.appID, SDKKeyCenter.serverSecret, userIDController.text);
          }
          ZEGOSDKManager().connectUser(userIDController.text, userNameController.text, token: token).then((_) {
            ZEGOSDKManager()
                .zimService
                .updateUserAvatarUrl('https://robohash.org/${userIDController.text}.png?set=set4');
          }).catchError((error) {
            ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('connectUser failed: $error')));
          });
        },
        child: const Text('Login'),
      ),
    );
  }

  Widget userIDInputView() {
    return Row(
      children: [
        const SizedBox(width: 20),
        const Text('userID:'),
        const SizedBox(width: 10),
        Flexible(
            child: TextField(
          controller: userIDController,
          decoration: const InputDecoration(
            labelText: 'please input your userID',
          ),
        )),
      ],
    );
  }

  Widget userNameInputView() {
    return Row(
      children: [
        const SizedBox(width: 20),
        const Text('userName:'),
        const SizedBox(width: 10),
        Flexible(
            child: TextField(
          controller: userNameController,
          decoration: const InputDecoration(
            labelText: 'please input your userName',
          ),
        )),
      ],
    );
  }

  Widget logo() {
    return Center(
      child: RichText(
        text: const TextSpan(
          text: 'ZE',
          style: TextStyle(color: Colors.black, fontSize: 30),
          children: <TextSpan>[
            TextSpan(
              text: 'GO',
              style: TextStyle(color: Colors.blue),
            ),
            TextSpan(text: 'CLOUD'),
          ],
        ),
      ),
    );
  }
}
