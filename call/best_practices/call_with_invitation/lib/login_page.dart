// ignore_for_file: use_build_context_synchronously

import 'dart:async';
import 'dart:math';
import 'package:call_with_invitation/zego_sdk_manager.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'interal/express/zego_express_service_defines.dart';
import 'interal/zim/zim_service_defines.dart';
import 'utils/permission.dart';
import 'home_page.dart';
import 'package:call_with_invitation/zego_sdk_key_center.dart';

import 'utils/zegocloud_token.dart';

class LoginPage extends StatefulWidget {
  const LoginPage({Key? key}) : super(key: key);

  @override
  State<LoginPage> createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> with TickerProviderStateMixin {
  /// Users who use the same roomID can join the same live streaming.
  final userIDTextCtrl = TextEditingController(text: Random().nextInt(100000).toString());
  final userNameTextCtrl = TextEditingController();
  List<StreamSubscription> subscriptions = [];

  @override
  void initState() {
    super.initState();
    subscriptions.addAll([
      ZEGOSDKManager.instance.zimService.connectionStateStreamCtrl.stream
          .listen((ZIMServiceConnectionStateChangedEvent event) {
        debugPrint('connectionStateStreamCtrl: $event');
        if (event.state == ZIMConnectionState.connected) {
          Navigator.pushReplacement(
            context,
            MaterialPageRoute(
              builder: (context) => HomePage(
                localUserID: userIDTextCtrl.text,
                localUserName: userNameTextCtrl.text,
              ),
            ),
          );
        }
      })
    ]);
    requestPermission();
    userNameTextCtrl.text = 'user_${userIDTextCtrl.text}';
  }

  @override
  void dispose() {
    for (var element in subscriptions) {
      element.cancel();
    }
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final buttonStyle = ElevatedButton.styleFrom(
      fixedSize: const Size(120, 60),
    );

    return Scaffold(
      body: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 10),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Text('Please test with two or more devices'),
            const Divider(),
            TextFormField(
              controller: userIDTextCtrl,
              decoration: const InputDecoration(labelText: 'your userID'),
            ),
            const SizedBox(height: 20),
            TextFormField(
              controller: userNameTextCtrl,
              decoration: const InputDecoration(labelText: 'your userName'),
            ),
            const SizedBox(height: 20),
            // click me to navigate to CallPage
            ElevatedButton(
              style: buttonStyle,
              child: const Text('Login'),
              onPressed: () async {
                await ZEGOSDKManager.instance.init(appID, kIsWeb ? null : appSign);
                String? token;
                if (kIsWeb) {
                  // ! ** Warning: ZegoTokenUtils is only for use during testing. When your application goes live,
                  // ! ** tokens must be generated by the server side. Please do not generate tokens on the client side!
                  token = ZegoTokenUtils.generateToken(appID, serverSecret, userIDTextCtrl.text);
                }
                await ZEGOSDKManager.instance.connectUser(userIDTextCtrl.text, userNameTextCtrl.text, token: token);
              },
            ),
          ],
        ),
      ),
    );
  }
}
