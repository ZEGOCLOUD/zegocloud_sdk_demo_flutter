import 'dart:math';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:live_audio_room_demo/zego_sdk_manager.dart';

import '../define.dart';
import '../live_audio_room_manager.dart';
import '../utils/zegocloud_token.dart';
import '../zego_sdk_key_center.dart';
import 'layout_config.dart';
import 'live_page.dart';

class HomePage extends StatefulWidget {
  const HomePage({super.key});

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  final roomIDController = TextEditingController(text: Random().nextInt(9999999).toString());

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Home Page'),
      ),
      body: Padding(
        padding: const EdgeInsets.only(top: 100, left: 30, right: 30),
        child: Column(
          children: [
            roomIDTextField(),
            const SizedBox(
              height: 20,
            ),
            hostJoinLivePageButton(),
            const SizedBox(
              height: 20,
            ),
            audienceJoinLivePageButton(),
          ],
        ),
      ),
    );
  }

  Widget roomIDTextField() {
    return SizedBox(
      width: 350,
      child: Row(
        children: [
          const Text('RoomID:'),
          const SizedBox(
            width: 10,
            height: 20,
          ),
          Flexible(
            child: TextField(
              controller: roomIDController,
              decoration: const InputDecoration(
                labelText: 'please input roomID',
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget hostJoinLivePageButton() {
    return SizedBox(
      width: 200,
      height: 50,
      child: ElevatedButton(
        onPressed: hostPress,
        child: const Text('Start Live'),
      ),
    );
  }

  void hostPress() {
    // ! ** Warning: ZegoTokenUtils is only for use during testing. When your application goes live,
    // ! ** tokens must be generated by the server side. Please do not generate tokens on the client side!
    String? token = kIsWeb
        ? ZegoTokenUtils.generateToken(
            SDKKeyCenter.appID, SDKKeyCenter.serverSecret, ZEGOSDKManager.instance.localUser!.userID)
        : null;
    ZegoLiveAudioRoomManager.shared.initWithConfig(ZegoLiveAudioRoomLayoutConfig(), ZegoLiveRole.host);
    ZEGOSDKManager.instance.loginRoom(roomIDController.text, token: token).then((value) {
      if (value.errorCode == 0) {
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => ZegoLivePage(
              roomID: roomIDController.text,
              role: ZegoLiveRole.host,
            ),
          ),
        );
      } else {
        ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('login room failed: ${value.errorCode}')));
      }
    });
  }

  Widget audienceJoinLivePageButton() {
    return SizedBox(
      width: 200,
      height: 50,
      child: ElevatedButton(
        onPressed: audiencePress,
        child: const Text('Watch Live'),
      ),
    );
  }

  void audiencePress() {
    // ! ** Warning: ZegoTokenUtils is only for use during testing. When your application goes live,
    // ! ** tokens must be generated by the server side. Please do not generate tokens on the client side!
    String? token = kIsWeb
        ? ZegoTokenUtils.generateToken(
            SDKKeyCenter.appID, SDKKeyCenter.serverSecret, ZEGOSDKManager.instance.localUser!.userID)
        : null;
    ZegoLiveAudioRoomManager.shared.initWithConfig(ZegoLiveAudioRoomLayoutConfig(), ZegoLiveRole.audience);
    ZEGOSDKManager.instance.loginRoom(roomIDController.text, token: token).then((value) {
      if (value.errorCode == 0) {
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => ZegoLivePage(
              roomID: roomIDController.text,
              role: ZegoLiveRole.audience,
            ),
          ),
        );
      } else {
        ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('login room failed: ${value.errorCode}')));
      }
    });
  }
}
